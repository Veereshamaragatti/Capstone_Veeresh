#!/usr/bin/env python3
"""
Simple test script to verify audio processing setup.
"""

def test_imports():
    """Test all imports."""
    print("Testing imports...")
    
    try:
        import numpy as np
        print("‚úì NumPy")
        
        import librosa
        print("‚úì Librosa")
        
        import soundfile as sf
        print("‚úì SoundFile")
        
        import noisereduce as nr
        print("‚úì NoiseReduce")
        
        from pydub import AudioSegment
        print("‚úì PyDub")
        
        import torch
        print("‚úì PyTorch")
        
        from moviepy.editor import VideoFileClip
        print("‚úì MoviePy")
        
        import whisper
        print("‚úì Whisper")
        
        try:
            from demucs.pretrained import get_model
            print("‚úì Demucs")
        except ImportError:
            print("‚ö† Demucs - Available but not loaded (normal)")
        
        print("\nAll imports successful!")
        return True
        
    except ImportError as e:
        print(f"‚úó Import error: {e}")
        return False


def test_ffmpeg():
    """Test FFmpeg availability."""
    import subprocess
    try:
        result = subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úì FFmpeg is available")
            return True
        else:
            print("‚úó FFmpeg not working properly")
            return False
    except FileNotFoundError:
        print("‚úó FFmpeg not found in PATH")
        return False


if __name__ == "__main__":
    print("="*60)
    print("AUDIO PROCESSING SETUP TEST")
    print("="*60)
    
    imports_ok = test_imports()
    ffmpeg_ok = test_ffmpeg()
    
    if imports_ok and ffmpeg_ok:
        print("\nüéâ Setup verification completed successfully!")
        print("You can now run the audio noise removal pipeline.")
    else:
        print("\n‚ùå Setup verification failed.")
        print("Please check the errors above and install missing dependencies.")
